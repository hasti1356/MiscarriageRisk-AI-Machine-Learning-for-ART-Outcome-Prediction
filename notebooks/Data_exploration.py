# -*- coding: utf-8 -*-
"""final1_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1axoCI4Qwhos2bzmo2_Moy0LGMS67IhTL

# Import main Libarary
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from google.colab import  files
import io

uploded=files.upload()

data=pd.read_excel(io.BytesIO(uploded['FinalDataset.xlsx']))

# data=pd.read_excel("F:\\zare-master\\after-master\\term2\\thesis\\mydatast\\14010928\\4011005\\FinalDataset.xlsx")

# Explorery in Data

data.info()

data.describe()

# Explorery  on Dataset

sns.jointplot(data=data,x='DP',y='age',hue='target')

Colum_data=['age','age_H','BMI','AMH','TSH','Prolactine ', 'Anti-Tpo ','Hb', 'Immotile ', 'Morph',
        'Nprogressive', 'Gra','DS','DP','Progressive','S_concentration','target']

data_plot=pd.DataFrame(data[Colum_data])

sns.pairplot(data=data_plot,hue='target')

Num_data=['age','age_H','BMI','AMH','TSH','Prolactine ', 'Anti-Tpo ','Hb', 'Immotile ', 'Morph',
        'Nprogressive', 'Gra','Progressive','S_concentration','target']

sns.pairplot(data=data[Num_data],hue='target')

# check and remove missing more than 50%

data.isnull().sum().to_frame('nulls').sort_values(by="nulls",ascending=False)/len(data)

plt.figure(figsize=(100,10))
sns.displot(
    data=data.isna().melt(value_name="missing"),
    y="variable",
    hue="missing",
    multiple="fill",
    aspect=1.5)
plt.savefig("visualizing_missing_data_with_barplot_Seaborn_distplot.png", dpi=100)

data.dropna(thresh=0.5*len(data),axis=1,inplace=True)
data.isna().sum().to_frame('nulls').sort_values(by="nulls",ascending=False)/len(data)

data.info()

Colum_data=['age','age_H','BMI','AMH','TSH','Prolactine ', 'Anti-Tpo ','Hb', 'Immotile ', 'Morph',
        'Nprogressive', 'Gra','DS','DP','Progressive','S_concentration','target']

Colum_data.remove('DS')
Colum_data.remove('AMH')
Colum_data.remove('Gra')
features=Colum_data[:-1]

"""# Data Cleaning"""

#  Plot  Numerical Features befor replace missing

list(enumerate(features))

fig=plt.figure(figsize=(25,40))
for i in enumerate(features[:-1]):
    plt.subplot(8,2,i[0]+1,facecolor='#0771')
    sns.boxplot(x=i[1],data=data,hue="target",palette="rainbow")

list(enumerate(features[:-1]))
fig=plt.figure(figsize=(25,40))
for i in enumerate(features[:-1]):
    plt.subplot(6,3,i[0]+1,facecolor='#0771')
    sns.kdeplot(i[1],data=data,color='#040f12')
    sns.rugplot(i[1],data=data,color='#4C0032')

# Remove or Replace Outlier features

data['age_H'].mean()

# Delete Cleaner

data.loc[(data['age_H']<18)|(data['age_H']>55),'age_H']=data['age_H'].mean()
data.loc[(data['age']>47),'age']=data['age'].mean()
data.loc[(data['TSH']<0.1)|(data['TSH']>7),'TSH']=data['TSH'].median()
data.loc[(data['BMI']<10)| (data['BMI']> 48),'BMI']=data['BMI'].median()
data.loc[(data['Prolactine ']<0.1 )|(data['Prolactine ']> 40),'Prolactine ']=data['Prolactine '].median()
data.loc[(data['Anti-Tpo ']<0.1 )|(data['Anti-Tpo ']>200),'Anti-Tpo ']=data['Anti-Tpo '].median()
data.loc[(data['Hb']<8)|(data['Hb']>16),'Hb']=data['Hb'].median()
data.loc[(data['Nprogressive']<5 )| (data['Nprogressive']>100),'Nprogressive']=data['Nprogressive'].median()
data.loc[(data['Morph']<0.1 )| (data['Morph']>100),'Morph']=data['Morph'].median()
data.loc[(data['Immotile ']<5 )| (data['Immotile ']>100),'Immotile ']=data['Immotile '].median()
data.loc[(data['Progressive']<5 )| (data['Progressive']>100),'Progressive']=data['Progressive'].median()
data.loc[(data['DP']<0 )| (data['DP']>=20),'DP']=data['DP'].mean()

data['age_H'].mean()

data.to_excel('F:\\zare-master\\after-master\\term2\\thesis\\mydatast\\14010928\\4011005\\test-bmi.xlsx')

#  Plot  after  Data Cleaning

fig=plt.figure(figsize=(25,40))
for i in enumerate(features):
    plt.subplot(8,2,i[0]+1,facecolor='#0771')
    sns.boxplot(x=i[1],data=data,hue="target",palette="rainbow")

list(enumerate(features))
fig=plt.figure(figsize=(25,40))
for i in enumerate(features):
    plt.subplot(6,3,i[0]+1,facecolor='#0771')
    sns.kdeplot(i[1],data=data,color='#040f12')
    sns.rugplot(i[1],data=data,color='#4C0032')

"""# Replace Missing Boolian Features with Most_Frequency"""

preprocessor=SimpleImputer(missing_values=np.nan,strategy="most_frequent")
    data['mR']=preprocessor.fit_transform(data["mR"].values.reshape(-1,1))[:,0]
    data['PastH']=preprocessor.fit_transform(data["PastH"].values.reshape(-1,1))[:,0]
    data['I/O']=preprocessor.fit_transform(data["I/O"].values.reshape(-1,1))[:,0]
    data['IUI']=preprocessor.fit_transform(data["IUI"].values.reshape(-1,1))[:,0]
    data['ART']=preprocessor.fit_transform(data["ART"].values.reshape(-1,1))[:,0]
    data['Primary']=preprocessor.fit_transform(data["Primary"].values.reshape(-1,1))[:,0]
    data['Secondry']=preprocessor.fit_transform(data["Secondry"].values.reshape(-1,1))[:,0]
    data['SH']=preprocessor.fit_transform(data["SH"].values.reshape(-1,1))[:,0]
    data["Diagnosis"]=preprocessor.fit_transform(data["Diagnosis"].values.reshape(-1,1))[:,0]
    data["Plan _ART"]=preprocessor.fit_transform(data["Plan _ART"].values.reshape(-1,1))[:,0]
    data["YF"]=preprocessor.fit_transform(data["YF"].values.reshape(-1,1))[:,0]
    data["Diagnosis_type"]=preprocessor.fit_transform(data["Diagnosis_type"].values.reshape(-1,1))[:,0]
    data["Shape"]=preprocessor.fit_transform(data["Shape"].values.reshape(-1,1))[:,0]
    data["Protocol_ ART"]=preprocessor.fit_transform(data["Protocol_ ART"].values.reshape(-1,1))[:,0]

data.isnull().sum()

plt.figure(figsize=(50,10))
sns.displot(
    data=data.isna().melt(value_name="missing"),
    y="variable",
    hue="missing",
    multiple="fill",
    aspect=1.8)

